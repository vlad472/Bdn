var defer0 = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
	}

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	var REACT_ELEMENT_TYPE;

	function _jsx(type, props, key, children) {
	  if (!REACT_ELEMENT_TYPE) {
	    REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol["for"] && Symbol["for"]("react.element") || 0xeac7;
	  }

	  var defaultProps = type && type.defaultProps;
	  var childrenLength = arguments.length - 3;

	  if (!props && childrenLength !== 0) {
	    props = {
	      children: void 0
	    };
	  }

	  if (props && defaultProps) {
	    for (var propName in defaultProps) {
	      if (props[propName] === void 0) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  } else if (!props) {
	    props = defaultProps || {};
	  }

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = new Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 3];
	    }

	    props.children = childArray;
	  }

	  return {
	    $$typeof: REACT_ELEMENT_TYPE,
	    type: type,
	    key: key === undefined ? null : '' + key,
	    ref: null,
	    props: props,
	    _owner: null
	  };
	}

	function _asyncIterator(iterable) {
	  var method;

	  if (typeof Symbol !== "undefined") {
	    if (Symbol.asyncIterator) {
	      method = iterable[Symbol.asyncIterator];
	      if (method != null) return method.call(iterable);
	    }

	    if (Symbol.iterator) {
	      method = iterable[Symbol.iterator];
	      if (method != null) return method.call(iterable);
	    }
	  }

	  throw new TypeError("Object is not async iterable");
	}

	function _AwaitValue(value) {
	  this.wrapped = value;
	}

	function _AsyncGenerator(gen) {
	  var front, back;

	  function send(key, arg) {
	    return new Promise(function (resolve, reject) {
	      var request = {
	        key: key,
	        arg: arg,
	        resolve: resolve,
	        reject: reject,
	        next: null
	      };

	      if (back) {
	        back = back.next = request;
	      } else {
	        front = back = request;
	        resume(key, arg);
	      }
	    });
	  }

	  function resume(key, arg) {
	    try {
	      var result = gen[key](arg);
	      var value = result.value;
	      var wrappedAwait = value instanceof _AwaitValue;
	      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
	        if (wrappedAwait) {
	          resume("next", arg);
	          return;
	        }

	        settle(result.done ? "return" : "normal", arg);
	      }, function (err) {
	        resume("throw", err);
	      });
	    } catch (err) {
	      settle("throw", err);
	    }
	  }

	  function settle(type, value) {
	    switch (type) {
	      case "return":
	        front.resolve({
	          value: value,
	          done: true
	        });
	        break;

	      case "throw":
	        front.reject(value);
	        break;

	      default:
	        front.resolve({
	          value: value,
	          done: false
	        });
	        break;
	    }

	    front = front.next;

	    if (front) {
	      resume(front.key, front.arg);
	    } else {
	      back = null;
	    }
	  }

	  this._invoke = send;

	  if (typeof gen.return !== "function") {
	    this.return = undefined;
	  }
	}

	if (typeof Symbol === "function" && Symbol.asyncIterator) {
	  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
	    return this;
	  };
	}

	_AsyncGenerator.prototype.next = function (arg) {
	  return this._invoke("next", arg);
	};

	_AsyncGenerator.prototype.throw = function (arg) {
	  return this._invoke("throw", arg);
	};

	_AsyncGenerator.prototype.return = function (arg) {
	  return this._invoke("return", arg);
	};

	function _wrapAsyncGenerator(fn) {
	  return function () {
	    return new _AsyncGenerator(fn.apply(this, arguments));
	  };
	}

	function _awaitAsyncGenerator(value) {
	  return new _AwaitValue(value);
	}

	function _asyncGeneratorDelegate(inner, awaitWrap) {
	  var iter = {},
	      waiting = false;

	  function pump(key, value) {
	    waiting = true;
	    value = new Promise(function (resolve) {
	      resolve(inner[key](value));
	    });
	    return {
	      done: false,
	      value: awaitWrap(value)
	    };
	  }

	  ;

	  if (typeof Symbol === "function" && Symbol.iterator) {
	    iter[Symbol.iterator] = function () {
	      return this;
	    };
	  }

	  iter.next = function (value) {
	    if (waiting) {
	      waiting = false;
	      return value;
	    }

	    return pump("next", value);
	  };

	  if (typeof inner.throw === "function") {
	    iter.throw = function (value) {
	      if (waiting) {
	        waiting = false;
	        throw value;
	      }

	      return pump("throw", value);
	    };
	  }

	  if (typeof inner.return === "function") {
	    iter.return = function (value) {
	      return pump("return", value);
	    };
	  }

	  return iter;
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _defineEnumerableProperties(obj, descs) {
	  for (var key in descs) {
	    var desc = descs[key];
	    desc.configurable = desc.enumerable = true;
	    if ("value" in desc) desc.writable = true;
	    Object.defineProperty(obj, key, desc);
	  }

	  if (Object.getOwnPropertySymbols) {
	    var objectSymbols = Object.getOwnPropertySymbols(descs);

	    for (var i = 0; i < objectSymbols.length; i++) {
	      var sym = objectSymbols[i];
	      var desc = descs[sym];
	      desc.configurable = desc.enumerable = true;
	      if ("value" in desc) desc.writable = true;
	      Object.defineProperty(obj, sym, desc);
	    }
	  }

	  return obj;
	}

	function _defaults(obj, defaults) {
	  var keys = Object.getOwnPropertyNames(defaults);

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var value = Object.getOwnPropertyDescriptor(defaults, key);

	    if (value && value.configurable && obj[key] === undefined) {
	      Object.defineProperty(obj, key, value);
	    }
	  }

	  return obj;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);

	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }

	    ownKeys.forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    });
	  }

	  return target;
	}

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys(source, true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(source).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (isNativeReflectConstruct()) {
	    _construct = Reflect.construct;
	  } else {
	    _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	function _instanceof(left, right) {
	  if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
	    return !!right[Symbol.hasInstance](left);
	  } else {
	    return left instanceof right;
	  }
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

	          if (desc.get || desc.set) {
	            Object.defineProperty(newObj, key, desc);
	          } else {
	            newObj[key] = obj[key];
	          }
	        }
	      }
	    }

	    newObj.default = obj;
	    return newObj;
	  }
	}

	function _newArrowCheck(innerThis, boundThis) {
	  if (innerThis !== boundThis) {
	    throw new TypeError("Cannot instantiate an arrow function");
	  }
	}

	function _objectDestructuringEmpty(obj) {
	  if (obj == null) throw new TypeError("Cannot destructure undefined");
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = _getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	function _get(target, property, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    _get = Reflect.get;
	  } else {
	    _get = function _get(target, property, receiver) {
	      var base = _superPropBase(target, property);

	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get(target, property, receiver || target);
	}

	function set(target, property, value, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.set) {
	    set = Reflect.set;
	  } else {
	    set = function set(target, property, value, receiver) {
	      var base = _superPropBase(target, property);

	      var desc;

	      if (base) {
	        desc = Object.getOwnPropertyDescriptor(base, property);

	        if (desc.set) {
	          desc.set.call(receiver, value);
	          return true;
	        } else if (!desc.writable) {
	          return false;
	        }
	      }

	      desc = Object.getOwnPropertyDescriptor(receiver, property);

	      if (desc) {
	        if (!desc.writable) {
	          return false;
	        }

	        desc.value = value;
	        Object.defineProperty(receiver, property, desc);
	      } else {
	        _defineProperty(receiver, property, value);
	      }

	      return true;
	    };
	  }

	  return set(target, property, value, receiver);
	}

	function _set(target, property, value, receiver, isStrict) {
	  var s = set(target, property, value, receiver || target);

	  if (!s && isStrict) {
	    throw new Error('failed to set property');
	  }

	  return value;
	}

	function _taggedTemplateLiteral(strings, raw) {
	  if (!raw) {
	    raw = strings.slice(0);
	  }

	  return Object.freeze(Object.defineProperties(strings, {
	    raw: {
	      value: Object.freeze(raw)
	    }
	  }));
	}

	function _taggedTemplateLiteralLoose(strings, raw) {
	  if (!raw) {
	    raw = strings.slice(0);
	  }

	  strings.raw = raw;
	  return strings;
	}

	function _temporalRef(val, name) {
	  if (val === _temporalUndefined) {
	    throw new ReferenceError(name + " is not defined - temporal dead zone");
	  } else {
	    return val;
	  }
	}

	function _readOnlyError(name) {
	  throw new Error("\"" + name + "\" is read-only");
	}

	function _classNameTDZError(name) {
	  throw new Error("Class \"" + name + "\" cannot be referenced in computed property keys.");
	}

	var _temporalUndefined = {};

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
	}

	function _slicedToArrayLoose(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimitLoose(arr, i) || _nonIterableRest();
	}

	function _toArray(arr) {
	  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  }
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _iterableToArrayLimitLoose(arr, i) {
	  var _arr = [];

	  for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
	    _arr.push(_step.value);

	    if (i && _arr.length === i) break;
	  }

	  return _arr;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	function _skipFirstGeneratorNext(fn) {
	  return function () {
	    var it = fn.apply(this, arguments);
	    it.next();
	    return it;
	  };
	}

	function _toPrimitive(input, hint) {
	  if (typeof input !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];

	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (typeof res !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }

	  return (hint === "string" ? String : Number)(input);
	}

	function _toPropertyKey(arg) {
	  var key = _toPrimitive(arg, "string");

	  return typeof key === "symbol" ? key : String(key);
	}

	function _initializerWarningHelper(descriptor, context) {
	  throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.');
	}

	function _initializerDefineProperty(target, property, descriptor, context) {
	  if (!descriptor) return;
	  Object.defineProperty(target, property, {
	    enumerable: descriptor.enumerable,
	    configurable: descriptor.configurable,
	    writable: descriptor.writable,
	    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	  });
	}

	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	  var desc = {};
	  Object.keys(descriptor).forEach(function (key) {
	    desc[key] = descriptor[key];
	  });
	  desc.enumerable = !!desc.enumerable;
	  desc.configurable = !!desc.configurable;

	  if ('value' in desc || desc.initializer) {
	    desc.writable = true;
	  }

	  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	    return decorator(target, property, desc) || desc;
	  }, desc);

	  if (context && desc.initializer !== void 0) {
	    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	    desc.initializer = undefined;
	  }

	  if (desc.initializer === void 0) {
	    Object.defineProperty(target, property, desc);
	    desc = null;
	  }

	  return desc;
	}

	var id = 0;

	function _classPrivateFieldLooseKey(name) {
	  return "__private_" + id++ + "_" + name;
	}

	function _classPrivateFieldLooseBase(receiver, privateKey) {
	  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
	    throw new TypeError("attempted to use private field on non-instance");
	  }

	  return receiver;
	}

	function _classPrivateFieldGet(receiver, privateMap) {
	  var descriptor = privateMap.get(receiver);

	  if (!descriptor) {
	    throw new TypeError("attempted to get private field on non-instance");
	  }

	  if (descriptor.get) {
	    return descriptor.get.call(receiver);
	  }

	  return descriptor.value;
	}

	function _classPrivateFieldSet(receiver, privateMap, value) {
	  var descriptor = privateMap.get(receiver);

	  if (!descriptor) {
	    throw new TypeError("attempted to set private field on non-instance");
	  }

	  if (descriptor.set) {
	    descriptor.set.call(receiver, value);
	  } else {
	    if (!descriptor.writable) {
	      throw new TypeError("attempted to set read only private field");
	    }

	    descriptor.value = value;
	  }

	  return value;
	}

	function _classPrivateFieldDestructureSet(receiver, privateMap) {
	  if (!privateMap.has(receiver)) {
	    throw new TypeError("attempted to set private field on non-instance");
	  }

	  var descriptor = privateMap.get(receiver);

	  if (descriptor.set) {
	    if (!("__destrObj" in descriptor)) {
	      descriptor.__destrObj = {
	        set value(v) {
	          descriptor.set.call(receiver, v);
	        }

	      };
	    }

	    return descriptor.__destrObj;
	  } else {
	    if (!descriptor.writable) {
	      throw new TypeError("attempted to set read only private field");
	    }

	    return descriptor;
	  }
	}

	function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
	  if (receiver !== classConstructor) {
	    throw new TypeError("Private static access of wrong provenance");
	  }

	  return descriptor.value;
	}

	function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
	  if (receiver !== classConstructor) {
	    throw new TypeError("Private static access of wrong provenance");
	  }

	  if (!descriptor.writable) {
	    throw new TypeError("attempted to set read only private field");
	  }

	  descriptor.value = value;
	  return value;
	}

	function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
	  if (receiver !== classConstructor) {
	    throw new TypeError("Private static access of wrong provenance");
	  }

	  return method;
	}

	function _classStaticPrivateMethodSet() {
	  throw new TypeError("attempted to set read only static private field");
	}

	function _decorate(decorators, factory, superClass, mixins) {
	  var api = _getDecoratorsApi();

	  if (mixins) {
	    for (var i = 0; i < mixins.length; i++) {
	      api = mixins[i](api);
	    }
	  }

	  var r = factory(function initialize(O) {
	    api.initializeInstanceElements(O, decorated.elements);
	  }, superClass);
	  var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);
	  api.initializeClassElements(r.F, decorated.elements);
	  return api.runClassFinishers(r.F, decorated.finishers);
	}

	function _getDecoratorsApi() {
	  _getDecoratorsApi = function () {
	    return api;
	  };

	  var api = {
	    elementsDefinitionOrder: [["method"], ["field"]],
	    initializeInstanceElements: function (O, elements) {
	      ["method", "field"].forEach(function (kind) {
	        elements.forEach(function (element) {
	          if (element.kind === kind && element.placement === "own") {
	            this.defineClassElement(O, element);
	          }
	        }, this);
	      }, this);
	    },
	    initializeClassElements: function (F, elements) {
	      var proto = F.prototype;
	      ["method", "field"].forEach(function (kind) {
	        elements.forEach(function (element) {
	          var placement = element.placement;

	          if (element.kind === kind && (placement === "static" || placement === "prototype")) {
	            var receiver = placement === "static" ? F : proto;
	            this.defineClassElement(receiver, element);
	          }
	        }, this);
	      }, this);
	    },
	    defineClassElement: function (receiver, element) {
	      var descriptor = element.descriptor;

	      if (element.kind === "field") {
	        var initializer = element.initializer;
	        descriptor = {
	          enumerable: descriptor.enumerable,
	          writable: descriptor.writable,
	          configurable: descriptor.configurable,
	          value: initializer === void 0 ? void 0 : initializer.call(receiver)
	        };
	      }

	      Object.defineProperty(receiver, element.key, descriptor);
	    },
	    decorateClass: function (elements, decorators) {
	      var newElements = [];
	      var finishers = [];
	      var placements = {
	        static: [],
	        prototype: [],
	        own: []
	      };
	      elements.forEach(function (element) {
	        this.addElementPlacement(element, placements);
	      }, this);
	      elements.forEach(function (element) {
	        if (!_hasDecorators(element)) return newElements.push(element);
	        var elementFinishersExtras = this.decorateElement(element, placements);
	        newElements.push(elementFinishersExtras.element);
	        newElements.push.apply(newElements, elementFinishersExtras.extras);
	        finishers.push.apply(finishers, elementFinishersExtras.finishers);
	      }, this);

	      if (!decorators) {
	        return {
	          elements: newElements,
	          finishers: finishers
	        };
	      }

	      var result = this.decorateConstructor(newElements, decorators);
	      finishers.push.apply(finishers, result.finishers);
	      result.finishers = finishers;
	      return result;
	    },
	    addElementPlacement: function (element, placements, silent) {
	      var keys = placements[element.placement];

	      if (!silent && keys.indexOf(element.key) !== -1) {
	        throw new TypeError("Duplicated element (" + element.key + ")");
	      }

	      keys.push(element.key);
	    },
	    decorateElement: function (element, placements) {
	      var extras = [];
	      var finishers = [];

	      for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) {
	        var keys = placements[element.placement];
	        keys.splice(keys.indexOf(element.key), 1);
	        var elementObject = this.fromElementDescriptor(element);
	        var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject);
	        element = elementFinisherExtras.element;
	        this.addElementPlacement(element, placements);

	        if (elementFinisherExtras.finisher) {
	          finishers.push(elementFinisherExtras.finisher);
	        }

	        var newExtras = elementFinisherExtras.extras;

	        if (newExtras) {
	          for (var j = 0; j < newExtras.length; j++) {
	            this.addElementPlacement(newExtras[j], placements);
	          }

	          extras.push.apply(extras, newExtras);
	        }
	      }

	      return {
	        element: element,
	        finishers: finishers,
	        extras: extras
	      };
	    },
	    decorateConstructor: function (elements, decorators) {
	      var finishers = [];

	      for (var i = decorators.length - 1; i >= 0; i--) {
	        var obj = this.fromClassDescriptor(elements);
	        var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj);

	        if (elementsAndFinisher.finisher !== undefined) {
	          finishers.push(elementsAndFinisher.finisher);
	        }

	        if (elementsAndFinisher.elements !== undefined) {
	          elements = elementsAndFinisher.elements;

	          for (var j = 0; j < elements.length - 1; j++) {
	            for (var k = j + 1; k < elements.length; k++) {
	              if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) {
	                throw new TypeError("Duplicated element (" + elements[j].key + ")");
	              }
	            }
	          }
	        }
	      }

	      return {
	        elements: elements,
	        finishers: finishers
	      };
	    },
	    fromElementDescriptor: function (element) {
	      var obj = {
	        kind: element.kind,
	        key: element.key,
	        placement: element.placement,
	        descriptor: element.descriptor
	      };
	      var desc = {
	        value: "Descriptor",
	        configurable: true
	      };
	      Object.defineProperty(obj, Symbol.toStringTag, desc);
	      if (element.kind === "field") obj.initializer = element.initializer;
	      return obj;
	    },
	    toElementDescriptors: function (elementObjects) {
	      if (elementObjects === undefined) return;
	      return _toArray(elementObjects).map(function (elementObject) {
	        var element = this.toElementDescriptor(elementObject);
	        this.disallowProperty(elementObject, "finisher", "An element descriptor");
	        this.disallowProperty(elementObject, "extras", "An element descriptor");
	        return element;
	      }, this);
	    },
	    toElementDescriptor: function (elementObject) {
	      var kind = String(elementObject.kind);

	      if (kind !== "method" && kind !== "field") {
	        throw new TypeError('An element descriptor\'s .kind property must be either "method" or' + ' "field", but a decorator created an element descriptor with' + ' .kind "' + kind + '"');
	      }

	      var key = _toPropertyKey(elementObject.key);

	      var placement = String(elementObject.placement);

	      if (placement !== "static" && placement !== "prototype" && placement !== "own") {
	        throw new TypeError('An element descriptor\'s .placement property must be one of "static",' + ' "prototype" or "own", but a decorator created an element descriptor' + ' with .placement "' + placement + '"');
	      }

	      var descriptor = elementObject.descriptor;
	      this.disallowProperty(elementObject, "elements", "An element descriptor");
	      var element = {
	        kind: kind,
	        key: key,
	        placement: placement,
	        descriptor: Object.assign({}, descriptor)
	      };

	      if (kind !== "field") {
	        this.disallowProperty(elementObject, "initializer", "A method descriptor");
	      } else {
	        this.disallowProperty(descriptor, "get", "The property descriptor of a field descriptor");
	        this.disallowProperty(descriptor, "set", "The property descriptor of a field descriptor");
	        this.disallowProperty(descriptor, "value", "The property descriptor of a field descriptor");
	        element.initializer = elementObject.initializer;
	      }

	      return element;
	    },
	    toElementFinisherExtras: function (elementObject) {
	      var element = this.toElementDescriptor(elementObject);

	      var finisher = _optionalCallableProperty(elementObject, "finisher");

	      var extras = this.toElementDescriptors(elementObject.extras);
	      return {
	        element: element,
	        finisher: finisher,
	        extras: extras
	      };
	    },
	    fromClassDescriptor: function (elements) {
	      var obj = {
	        kind: "class",
	        elements: elements.map(this.fromElementDescriptor, this)
	      };
	      var desc = {
	        value: "Descriptor",
	        configurable: true
	      };
	      Object.defineProperty(obj, Symbol.toStringTag, desc);
	      return obj;
	    },
	    toClassDescriptor: function (obj) {
	      var kind = String(obj.kind);

	      if (kind !== "class") {
	        throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator' + ' created a class descriptor with .kind "' + kind + '"');
	      }

	      this.disallowProperty(obj, "key", "A class descriptor");
	      this.disallowProperty(obj, "placement", "A class descriptor");
	      this.disallowProperty(obj, "descriptor", "A class descriptor");
	      this.disallowProperty(obj, "initializer", "A class descriptor");
	      this.disallowProperty(obj, "extras", "A class descriptor");

	      var finisher = _optionalCallableProperty(obj, "finisher");

	      var elements = this.toElementDescriptors(obj.elements);
	      return {
	        elements: elements,
	        finisher: finisher
	      };
	    },
	    runClassFinishers: function (constructor, finishers) {
	      for (var i = 0; i < finishers.length; i++) {
	        var newConstructor = (0, finishers[i])(constructor);

	        if (newConstructor !== undefined) {
	          if (typeof newConstructor !== "function") {
	            throw new TypeError("Finishers must return a constructor.");
	          }

	          constructor = newConstructor;
	        }
	      }

	      return constructor;
	    },
	    disallowProperty: function (obj, name, objectType) {
	      if (obj[name] !== undefined) {
	        throw new TypeError(objectType + " can't have a ." + name + " property.");
	      }
	    }
	  };
	  return api;
	}

	function _createElementDescriptor(def) {
	  var key = _toPropertyKey(def.key);

	  var descriptor;

	  if (def.kind === "method") {
	    descriptor = {
	      value: def.value,
	      writable: true,
	      configurable: true,
	      enumerable: false
	    };
	  } else if (def.kind === "get") {
	    descriptor = {
	      get: def.value,
	      configurable: true,
	      enumerable: false
	    };
	  } else if (def.kind === "set") {
	    descriptor = {
	      set: def.value,
	      configurable: true,
	      enumerable: false
	    };
	  } else if (def.kind === "field") {
	    descriptor = {
	      configurable: true,
	      writable: true,
	      enumerable: true
	    };
	  }

	  var element = {
	    kind: def.kind === "field" ? "field" : "method",
	    key: key,
	    placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype",
	    descriptor: descriptor
	  };
	  if (def.decorators) element.decorators = def.decorators;
	  if (def.kind === "field") element.initializer = def.value;
	  return element;
	}

	function _coalesceGetterSetter(element, other) {
	  if (element.descriptor.get !== undefined) {
	    other.descriptor.get = element.descriptor.get;
	  } else {
	    other.descriptor.set = element.descriptor.set;
	  }
	}

	function _coalesceClassElements(elements) {
	  var newElements = [];

	  var isSameElement = function (other) {
	    return other.kind === "method" && other.key === element.key && other.placement === element.placement;
	  };

	  for (var i = 0; i < elements.length; i++) {
	    var element = elements[i];
	    var other;

	    if (element.kind === "method" && (other = newElements.find(isSameElement))) {
	      if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {
	        if (_hasDecorators(element) || _hasDecorators(other)) {
	          throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated.");
	        }

	        other.descriptor = element.descriptor;
	      } else {
	        if (_hasDecorators(element)) {
	          if (_hasDecorators(other)) {
	            throw new ReferenceError("Decorators can't be placed on different accessors with for " + "the same property (" + element.key + ").");
	          }

	          other.decorators = element.decorators;
	        }

	        _coalesceGetterSetter(element, other);
	      }
	    } else {
	      newElements.push(element);
	    }
	  }

	  return newElements;
	}

	function _hasDecorators(element) {
	  return element.decorators && element.decorators.length;
	}

	function _isDataDescriptor(desc) {
	  return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);
	}

	function _optionalCallableProperty(obj, name) {
	  var value = obj[name];

	  if (value !== undefined && typeof value !== "function") {
	    throw new TypeError("Expected '" + name + "' to be a function");
	  }

	  return value;
	}

	function _classPrivateMethodGet(receiver, privateSet, fn) {
	  if (!privateSet.has(receiver)) {
	    throw new TypeError("attempted to get private field on non-instance");
	  }

	  return fn;
	}

	function _classPrivateMethodSet() {
	  throw new TypeError("attempted to reassign private method");
	}

	function _wrapRegExp(re, groups) {
	  _wrapRegExp = function (re, groups) {
	    return new BabelRegExp(re, groups);
	  };

	  var _RegExp = _wrapNativeSuper(RegExp);

	  var _super = RegExp.prototype;

	  var _groups = new WeakMap();

	  function BabelRegExp(re, groups) {
	    var _this = _RegExp.call(this, re);

	    _groups.set(_this, groups);

	    return _this;
	  }

	  _inherits(BabelRegExp, _RegExp);

	  BabelRegExp.prototype.exec = function (str) {
	    var result = _super.exec.call(this, str);

	    if (result) result.groups = buildGroups(result, this);
	    return result;
	  };

	  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
	    if (typeof substitution === "string") {
	      var groups = _groups.get(this);

	      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
	        return "$" + groups[name];
	      }));
	    } else if (typeof substitution === "function") {
	      var _this = this;

	      return _super[Symbol.replace].call(this, str, function () {
	        var args = [];
	        args.push.apply(args, arguments);

	        if (typeof args[args.length - 1] !== "object") {
	          args.push(buildGroups(args, _this));
	        }

	        return substitution.apply(this, args);
	      });
	    } else {
	      return _super[Symbol.replace].call(this, str, substitution);
	    }
	  };

	  function buildGroups(result, re) {
	    var g = _groups.get(re);

	    return Object.keys(g).reduce(function (groups, name) {
	      groups[name] = result[g[name]];
	      return groups;
	    }, Object.create(null));
	  }

	  return _wrapRegExp.apply(this, arguments);
	}

	var common = createCommonjsModule(function (module) {
	  'use strict';
	  /**
	   * Common utility functions
	   */

	  var commonUtil = module.exports = {
	    /**
	     * Local soped window. It allows tests to mock the window object if needed.
	     * @type {Object}
	     */
	    window: window,

	    /**
	     * Recursively apply config settings.
	     *
	     * @param  {Object} defaults  Base object to be overriden for this level.
	     * @param  {Object} config    Overrides for this level, if any.
	     * @param  {Integer} maxDepth Maximum number of recursion.
	     * @return {Object}           Recursively overriden object.
	     */
	    deepOverride: function deepOverride(defaults, config, maxDepth) {
	      /*jshint maxcomplexity:8*/
	      var options = {};

	      if (maxDepth === undefined) {
	        maxDepth = Infinity;
	      } // Apply config to defaults.


	      for (var p in defaults) {
	        if (defaults.hasOwnProperty(p)) {
	          // Recurse into objects only. Arrays are treated as overridable values.
	          var notNull = defaults[p] !== null;
	          var isObject = _typeof(defaults[p]) === 'object';
	          isObject = isObject && !commonUtil.isArray(defaults[p]);

	          if (config === undefined) {
	            options[p] = defaults[p];
	          } else if (maxDepth > 0 && notNull && isObject) {
	            options[p] = commonUtil.deepOverride(defaults[p], config[p], maxDepth - 1);
	          } else if (!config.hasOwnProperty(p)) {
	            options[p] = defaults[p];
	          } else if (config[p] !== undefined) {
	            options[p] = config[p];
	          }
	        }
	      }

	      return options;
	    },

	    /**
	     * Determines whether a variable is an array in a cross-browser way.
	     * @param  {Object}  arg An object.
	     * @return {Boolean}     True if arg is an array.
	     */
	    isArray: function isArray(arg) {
	      if (Array.isArray) {
	        return Array.isArray(arg);
	      } else {
	        return Object.prototype.toString.call(arg) === '[object Array]';
	      }
	    },

	    /**
	     * Determines whether an object is empty.
	     * @param  {Object}   obj An object.
	     * @return {Boolean}  true if obj is empty.
	     */
	    isEmptyObject: function isEmptyObject(obj) {
	      var name;

	      for (name in obj) {
	        if (obj.hasOwnProperty(name)) {
	          return false;
	        }
	      }

	      return obj !== null;
	    },

	    /**
	     * Iterates over an object or array and applies a function to each element.
	     *
	     * @param  {Object|Array} object An object or array. It will be iterated over.
	     * @param  {Function} iterator A function applied to all items in object.
	     * @return {Array} new mapped array
	     */
	    map: function map(object, iterator) {
	      // Never iterate over null objects.
	      if (object === null) {
	        return;
	      }

	      var results = [];

	      if (Object.keys) {
	        var keys = Object.keys(object);
	        var nKeys = keys.length;

	        for (var i = 0; i < nKeys; i++) {
	          var key = keys[i];
	          results.push(iterator(key, object[key]));
	        }
	      } else {
	        // Polifill for IE<9 since for..in is slower than the above option.
	        for (var k in object) {
	          if (object.hasOwnProperty(k)) {
	            results.push(iterator(k, object[k]));
	          }
	        }
	      }

	      return results;
	    },

	    /**
	     * Iterates over elements of array,
	     * returning an array of all elements predicate returns truthy for.
	     *
	     * @param  {Array} The array to iterate over.
	     * @param  {Function} The predicate function invoked per iteration.
	     * @return {Array} new filtered array
	     */
	    filter: function filter(array, predicate) {
	      // Never iterate over null objects or non-array
	      if (array === null || !this.isArray(array)) {
	        return;
	      }

	      var results = [];

	      for (var i = 0; i < array.length; i++) {
	        if (predicate(array[i])) {
	          results.push(array[i]);
	        }
	      }

	      return results;
	    },

	    /**
	     * Executes given function on the next process tick
	     *
	     * This implementation of process.nextTick from Node.js is inefficient.
	     * If this becomes a problem, we can replace it with the solution found here:
	     * timnew.me/blog/2014/06/23/process-nexttick-implementation-in-browser
	     *
	     * @param  {Function} Function to execute
	     */
	    nextTick: function nextTick(fn) {
	      setTimeout(fn, 0);
	    },

	    /**
	     * Adds styles to the page.
	     * Creates a style tag with the contents of css.
	     *
	     * @param  {String} css String with styles.
	     */
	    appendStyles: function appendStyles(css) {
	      var head = document.head || document.getElementsByTagName('head')[0];
	      var styleElement = document.createElement('style');
	      styleElement.type = 'text/css';
	      /**
	       * @font-face fix.
	       * IE8 does not support to add @font-face definitions on CSS that
	       * are not attached to the DOM yet, so we must add the style tag first.
	       */

	      head.appendChild(styleElement); //  handle differnt methods for adding css to the style element

	      if (styleElement.styleSheet) {
	        styleElement.styleSheet.cssText = css; // Also set innerHTML for by IE 9/10.

	        try {
	          styleElement.innerHTML = css;
	        } catch (e) {// Ignore ie8 errors.
	        }
	      } else {
	        styleElement.appendChild(document.createTextNode(css));
	      }
	    },

	    /**
	     * Adds an external script to the page.
	     *
	     * @param  {String} src the url of the script to add.
	     */
	    appendScript: function appendScript(src) {
	      var head = document.head || document.getElementsByTagName('head')[0];
	      var script = document.createElement('script');
	      script.type = 'text/javascript';
	      script.src = src;
	      head.appendChild(script);
	    },

	    /**
	     * Ensures a variable/script include is in the page.
	     * Returns a [fake] promise with a then(callback) function
	     *
	     * @param  {String} variableName the name of the global variable to look for
	     * @param  {Object} options A hash of options
	     *    Valid keys are: url (script to include), interval (time between checks)
	     * @todo Could write another function to recursively call
	     *       this with a dependency chain
	     */
	    ensureScript: function ensureScript(variableName, options) {
	      // Interval between lookups
	      var interval = options.interval ? options.interval : 10; // True when script is loaded

	      var loaded = false;
	      var callback = false;

	      var check = function check() {
	        var exists = true;
	        var parts = variableName.split('.');
	        var baseObject = window;

	        for (var i = 0; exists && i < parts.length; i++) {
	          if (baseObject.hasOwnProperty) {
	            exists = baseObject.hasOwnProperty(parts[i]);
	          } else {
	            // Supports IE<8 not having window.hasOwnProperty
	            exists = baseObject[parts[i]] ? true : false;
	          }

	          baseObject = baseObject[parts[i]];
	        }

	        if (exists) {
	          loaded = true;

	          if (callback) {
	            callback.call();
	          }
	        } else {
	          if (options.url) {
	            commonUtil.appendScript(options.url);
	            delete options.url;
	          }

	          setTimeout(check, interval);
	        }
	      };

	      check();
	      return {
	        then: function then(cb) {
	          // If already loaded
	          if (loaded) {
	            cb.call();
	          } else {
	            // Set this up to be called once loaded
	            callback = cb;
	          }
	        }
	      };
	    },

	    /**
	     * Checks a class exists on an element
	     *
	     * @param {Object} elem   Object to check for class name
	     * @param {String} name   CSS class name
	     * @return {Boolean}      Whether name exists on elem
	     */
	    hasClass: function hasClass(elem, name) {
	      var elemClassName = ' ' + elem.className + ' ';
	      var searchClassName = ' ' + name + ' ';
	      return elemClassName.indexOf(searchClassName) > -1;
	    },

	    /**
	     * Toggle a class on an element
	     *
	     * @param {Object} elem      Object to toggle class name on
	     * @param {String} name      CSS class name
	     * @param {Boolean} [state]  Set to `true` to add class, `false` to remove, `undefined` to toggle
	     */
	    toggleClass: function toggleClass(elem, name, state) {
	      if (!elem) return;
	      var hasClass = typeof state === 'boolean' ? !state : commonUtil.hasClass(elem, name);

	      if (hasClass) {
	        commonUtil.removeClass(elem, name);
	      } else {
	        commonUtil.addClass(elem, name);
	      }
	    },

	    /**
	     * Add a class on an element
	     *
	     * @param {Object} elem   Object to addclass name on
	     * @param {String} name   CSS class name
	     */
	    addClass: function addClass(elem, name) {
	      if (!elem) return;
	      var classes = elem.className.split(/\s+/);

	      if (classes.indexOf(name) === -1) {
	        classes.splice(classes.length, 0, name);
	        elem.className = classes.join(' ');
	      }
	    },

	    /**
	     * Remove a class on an element
	     *
	     * @param {Object} elem   Object to remove class name on
	     * @param {String} name   CSS class name
	     */
	    removeClass: function removeClass(elem, name) {
	      if (!elem) return;
	      var classes = elem.className.split(/\s+/);

	      for (var i = classes.length; i >= 0; i--) {
	        if (classes[i] === name) {
	          classes.splice(i, 1);
	          elem.className = classes.join(' ');
	        }
	      }
	    },

	    /**
	     * Returns the second and top level domain
	     *
	     * @param  {String} fallback fallback domain if match fails
	     * @return {String} second and top level domain, or fallback if match fails
	     */
	    getCurrentDomain: function getCurrentDomain(fallback) {
	      var domain = commonUtil.window.location.hostname; // matches second and top level domain
	      // For 'www.leagueoflegends.co.kr' it matches 'leagueoflegends.co.kr'

	      var re = /([a-z]+\.[a-z]{2,4}(\.[a-z]{2,4})?)$/i;
	      var match = domain.match(re);

	      if (match !== null) {
	        return match[1];
	      }

	      return fallback;
	    },

	    /**
	     * Creates Cross-Origin Resource Sharing (CORS) that is supports the
	     * following browsers:
	     * -Chrome 3+
	     * -Firefox 3.5+
	     * -Opera 12+
	     * -Safari 4+
	     * -Internet Explorer 8+
	     * @param method
	     * @param url
	     * @return Open request or null if CORS is not supported by the browser
	     */
	    createCORSRequest: function createCORSRequest(method, url) {
	      var xhr = new XMLHttpRequest();

	      if ('withCredentials' in xhr) {
	        // Check if the XMLHttpRequest object has a "withCredentials" property.
	        // "withCredentials" only exists on XMLHTTPRequest2 objects.
	        xhr.open(method, url, true);
	      } else if (typeof XDomainRequest != 'undefined') {
	        // Otherwise, check if XDomainRequest.
	        // XDomainRequest only exists in IE, and is IE's way of making CORS
	        // requests.
	        xhr = new XDomainRequest();
	        xhr.open(method, url);
	      } else {
	        // Otherwise, CORS is not supported by the browser.
	        xhr = null;
	      }

	      return xhr;
	    },

	    /**
	     * Allows a plugin add Event handling in a cleaner way.
	     *
	     * @param {Object} obj    Object triggering the event.
	     * @param {String} type   The type of event.
	     * @param {Function} fn   The function to execute when event fires.
	     */
	    addEvent: function addEvent(obj, type, fn) {
	      if (!obj) {
	        return;
	      }

	      if (obj.attachEvent) {
	        obj['e' + type + fn] = fn;

	        obj[type + fn] = function () {
	          obj['e' + type + fn](commonUtil.window.event);
	        };

	        obj.attachEvent('on' + type, obj[type + fn]);
	      } else {
	        obj.addEventListener(type, fn, false);
	      }
	    },

	    /**
	     * Allows a plugin remove Event handling in a cleaner way.
	     *
	     * @param {Object} obj    Object triggering the event.
	     * @param {String} type   The type of event.
	     * @param {Function} fn   The function to execute when event fires.
	     */
	    removeEvent: function removeEvent(obj, type, fn) {
	      if (!obj) {
	        return;
	      }

	      if (obj.detachEvent) {
	        obj.detachEvent('on' + type, obj[type + fn]);
	        obj[type + fn] = null;
	      } else {
	        obj.removeEventListener(type, fn, false);
	      }
	    },

	    /**
	     * Sets a cookie in the browser.
	     *
	     * @param {String} cookie  The cookie name
	     * @param {String} value   The value for the cookie
	     * @param {Object} options An object with options.
	     *   Valid keys are: expires, path, domain, secure.
	     */
	    setCookie: function setCookie(cookie, value, options) {
	      cookie = encodeURIComponent(cookie);
	      value = encodeURIComponent(value);
	      var cookieString = cookie + '=' + value + ';';
	      options = options || {};

	      if (options.expires) {
	        cookieString = cookieString + 'expires=' + options.expires + ';';
	      }

	      if (options.path) {
	        cookieString = cookieString + 'path=' + options.path + ';';
	      }

	      if (options.domain && options.domain != 'localhost') {
	        cookieString = cookieString + 'domain=' + options.domain + ';';
	      }

	      if (options.secure) {
	        cookieString = cookieString + 'secure;';
	      }

	      document.cookie = cookieString;
	    },

	    /**
	     * Gets a cookie previously set.
	     *
	     * @param  {String} cookie the name of the cookie to get.
	     * @return {String}        the value of the cookie, or false if not present.
	     */
	    getCookie: function getCookie(cookie) {
	      cookie = encodeURIComponent(cookie);
	      var regex = new RegExp(cookie + '=([^;]*)'),
	          match = regex.exec(document.cookie);

	      if (match) {
	        return decodeURIComponent(match[1]);
	      }

	      return false;
	    },

	    /**
	     * Deletes a cookie.
	     *
	     */
	    delCookie: function delCookie(cookie) {
	      commonUtil.setCookie(cookie, '', {
	        expires: 'Thu, 01 Jan 1970 00:00:01 GMT'
	      });
	    },

	    /**
	     * Converts an HTML string to a dom element
	     * Note limitations: https://stackoverflow.com/questions/494143/
	     */
	    createElementFromHTML: function createElementFromHTML(htmlString) {
	      var div = document.createElement('div');
	      div.innerHTML = htmlString.trim();
	      return div.firstChild;
	    },
	    isDescendantOfId: function isDescendantOfId(el, id) {
	      do {
	        if (!el) return false;
	        if (el.id === id) return true;
	      } while (el = el.parentElement);

	      return false;
	    },
	    isDescendantOfClass: function isDescendantOfClass(el, className) {
	      do {
	        if (!el) return false;
	        if (this.hasClass(el, className)) return true;
	      } while (el = el.parentElement);

	      return false;
	    },
	    isDescendantOfEl: function isDescendantOfEl(el, target) {
	      if (!target) return false;

	      do {
	        if (!el) return false;
	        if (el === target) return true;
	      } while (el = el.parentElement);

	      return false;
	    },

	    /**
	     * Responsible for determining what the `global.renderInto` element is if it is passed
	     * if the passed value is a valid element by ID or direct HTMLElement reference
	     * an HTMLElement will be returned. Otherwise, false will be given back
	     * @param {string | HTMLElement} renderInto
	     * @return {HTMLElement | false}
	     */
	    determineRenderIntoElement: function determineRenderIntoElement(renderInto) {
	      var el = false;

	      if (typeof renderInto === 'string' && document.getElementById(renderInto) !== null) {
	        el = document.getElementById(renderInto);
	      } else if (renderInto instanceof Object) {
	        el = renderInto;
	      }

	      return el;
	    },
	    determineDeferredFilePrefix: function determineDeferredFilePrefix() {
	      var filePrefix = 'playvalorantfinal';

	      if (filePrefix !== 'riotbar.product_identifier') {
	        // Not the key?
	        filePrefix += '.';
	      } else {
	        filePrefix = '';
	      }

	      return filePrefix;
	    },

	    /**
	     * Checks current page URL to see if the link is a match against the regular expression
	     * @param {RegExp} regex
	     * @return {boolean}
	     */
	    checkLinkMatch: function checkLinkMatch(regex) {
	      if (!regex) {
	        return false;
	      }

	      if (typeof regex === 'string') {
	        regex = new RegExp(regex);
	      }

	      if (!window || !window.location) {
	        return false;
	      }

	      var link = this.getCurrentURLPath();
	      return regex.test(link);
	    },
	    getCurrentURLPath: function getCurrentURLPath() {
	      return window.location.pathname;
	    },
	    logError: function logError(err) {
	      console && console.error ? console.error(err) : void 0;
	    }
	  };
	});
	var common_1 = common.window;
	var common_2 = common.deepOverride;
	var common_3 = common.isArray;
	var common_4 = common.isEmptyObject;
	var common_5 = common.map;
	var common_6 = common.filter;
	var common_7 = common.nextTick;
	var common_8 = common.appendStyles;
	var common_9 = common.appendScript;
	var common_10 = common.ensureScript;
	var common_11 = common.hasClass;
	var common_12 = common.toggleClass;
	var common_13 = common.addClass;
	var common_14 = common.removeClass;
	var common_15 = common.getCurrentDomain;
	var common_16 = common.createCORSRequest;
	var common_17 = common.addEvent;
	var common_18 = common.removeEvent;
	var common_19 = common.setCookie;
	var common_20 = common.getCookie;
	var common_21 = common.delCookie;
	var common_22 = common.createElementFromHTML;
	var common_23 = common.isDescendantOfId;
	var common_24 = common.isDescendantOfClass;
	var common_25 = common.isDescendantOfEl;
	var common_26 = common.determineRenderIntoElement;
	var common_27 = common.determineDeferredFilePrefix;
	var common_28 = common.checkLinkMatch;
	var common_29 = common.getCurrentURLPath;
	var common_30 = common.logError;

	function anonymous(data, escapeFn, include, rethrow
	) {
	rethrow = rethrow || function rethrow(err, str, flnm, lineno, esc){
	  var lines = str.split('\n');
	  var start = Math.max(lineno - 3, 0);
	  var end = Math.min(lines.length, lineno + 3);
	  var filename = esc(flnm); // eslint-disable-line
	  // Error context
	  var context = lines.slice(start, end).map(function (line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? ' >> ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');

	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'ejs') + ':'
	    + lineno + '\n'
	    + context + '\n\n'
	    + err.message;

	  throw err;
	};
	escapeFn = escapeFn || function (markup) {
	  return markup == undefined
	    ? ''
	    : String(markup)
	      .replace(_MATCH_HTML, encode_char);
	};
	var _ENCODE_HTML_RULES = {
	      "&": "&amp;"
	    , "<": "&lt;"
	    , ">": "&gt;"
	    , '"': "&#34;"
	    , "'": "&#39;"
	    }
	  , _MATCH_HTML = /[&<>'"]/g;
	function encode_char(c) {
	  return _ENCODE_HTML_RULES[c] || c;
	};
	;
	var __line = 1
	  , __lines = "<!-- <div class=\"cookie-link expanding light corner-button bottom-right\"> -->\n    <div class=\"icon link-text\">\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n viewBox=\"0 0 64 77\">\n            <path d=\"M63.6,13.1c0-1-0.7-1.9-1.8-2c-4.7-0.6-9.4-1.8-13.9-3.4c-4.5-1.7-9.6-4-15-7.1\n                c-0.7-0.4-1.3-0.4-2,0c-5.4,3.1-10.4,5.4-15,7.1C11.4,9.2,6.7,10.4,2,11c-1,0.1-1.7,1-1.8,2C-0.3,32.3,4,48,12.8,60.3\n                c4.8,6.7,10.8,12.1,18.1,16.2c0.6,0.4,1.4,0.4,2.1,0c7.2-4.2,13.2-9.6,18-16.2C59.9,48,64.1,32.3,63.6,13.1L63.6,13.1z M47.7,57.9\n                c-4.2,5.8-9.4,10.6-15.8,14.4c-6.3-3.9-11.6-8.7-15.8-14.4c-8-11.2-12-25.5-11.8-43c4.4-0.7,8.8-1.9,13.2-3.5\n                c4.4-1.6,9.2-3.8,14.4-6.6c5.2,2.8,9.9,5,14.3,6.6c4.4,1.6,8.8,2.8,13.2,3.5C59.6,32.5,55.7,46.8,47.7,57.9L47.7,57.9z M47.7,57.9\n                \"/>\n            <path d=\"M45.9,30.9l-0.2-0.1L45,29.2l0.1-0.2c2.1-4.9,2-5,1.6-5.3l-2.9-2.8c-0.1-0.1-0.3-0.2-0.5-0.2c-0.2,0-0.6,0-4.9,1.9\n                l-0.2,0.1L36.6,22l-0.1-0.2c-2-4.9-2.2-4.9-2.7-4.9h-4c-0.5,0-0.7,0-2.6,4.9L27.2,22l-1.7,0.7l-0.2-0.1c-2.9-1.2-4.5-1.8-4.9-1.8\n                c-0.2,0-0.4,0.1-0.5,0.2L17,23.8c-0.4,0.4-0.5,0.5,1.7,5.3l0.1,0.2l-0.7,1.7L17.9,31c-5,1.9-5,2.1-5,2.6v3.9c0,0.5,0,0.7,5,2.5\n                l0.2,0.1l0.7,1.7L18.8,42c-2.1,4.9-2,5-1.6,5.3l2.9,2.8c0.1,0.1,0.3,0.2,0.5,0.2c0.2,0,0.6,0,4.9-1.9l0.2-0.1l1.7,0.7l0.1,0.2\n                c2,4.9,2.2,4.9,2.7,4.9h4c0.5,0,0.7,0,2.6-4.9l0.1-0.2l1.7-0.7l0.2,0.1c2.8,1.2,4.5,1.8,4.9,1.8c0.2,0,0.4-0.1,0.5-0.2l2.9-2.8\n                c0.4-0.4,0.5-0.5-1.7-5.3L45,41.8l0.7-1.7l0.2-0.1c5-2,5-2.1,5-2.6v-3.9C50.9,32.9,50.9,32.7,45.9,30.9L45.9,30.9z M31.9,41.9\n                c-3.6,0-6.5-2.9-6.5-6.4c0-3.5,2.9-6.4,6.5-6.4c3.6,0,6.5,2.9,6.5,6.4C38.4,39,35.5,41.9,31.9,41.9L31.9,41.9z M31.9,41.9\"/>\n            </svg>\n    </div>\n    <div class=\"label link-text\"><span id=<%= data.id %>></span></div>\n<!-- </div> -->\n"
	  , __filename = undefined;
	try {
	  var __output = [], __append = __output.push.bind(__output);
	    ; __append("<!-- <div class=\"cookie-link expanding light corner-button bottom-right\"> -->\n    <div class=\"icon link-text\">\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n viewBox=\"0 0 64 77\">\n            <path d=\"M63.6,13.1c0-1-0.7-1.9-1.8-2c-4.7-0.6-9.4-1.8-13.9-3.4c-4.5-1.7-9.6-4-15-7.1\n                c-0.7-0.4-1.3-0.4-2,0c-5.4,3.1-10.4,5.4-15,7.1C11.4,9.2,6.7,10.4,2,11c-1,0.1-1.7,1-1.8,2C-0.3,32.3,4,48,12.8,60.3\n                c4.8,6.7,10.8,12.1,18.1,16.2c0.6,0.4,1.4,0.4,2.1,0c7.2-4.2,13.2-9.6,18-16.2C59.9,48,64.1,32.3,63.6,13.1L63.6,13.1z M47.7,57.9\n                c-4.2,5.8-9.4,10.6-15.8,14.4c-6.3-3.9-11.6-8.7-15.8-14.4c-8-11.2-12-25.5-11.8-43c4.4-0.7,8.8-1.9,13.2-3.5\n                c4.4-1.6,9.2-3.8,14.4-6.6c5.2,2.8,9.9,5,14.3,6.6c4.4,1.6,8.8,2.8,13.2,3.5C59.6,32.5,55.7,46.8,47.7,57.9L47.7,57.9z M47.7,57.9\n                \"/>\n            <path d=\"M45.9,30.9l-0.2-0.1L45,29.2l0.1-0.2c2.1-4.9,2-5,1.6-5.3l-2.9-2.8c-0.1-0.1-0.3-0.2-0.5-0.2c-0.2,0-0.6,0-4.9,1.9\n                l-0.2,0.1L36.6,22l-0.1-0.2c-2-4.9-2.2-4.9-2.7-4.9h-4c-0.5,0-0.7,0-2.6,4.9L27.2,22l-1.7,0.7l-0.2-0.1c-2.9-1.2-4.5-1.8-4.9-1.8\n                c-0.2,0-0.4,0.1-0.5,0.2L17,23.8c-0.4,0.4-0.5,0.5,1.7,5.3l0.1,0.2l-0.7,1.7L17.9,31c-5,1.9-5,2.1-5,2.6v3.9c0,0.5,0,0.7,5,2.5\n                l0.2,0.1l0.7,1.7L18.8,42c-2.1,4.9-2,5-1.6,5.3l2.9,2.8c0.1,0.1,0.3,0.2,0.5,0.2c0.2,0,0.6,0,4.9-1.9l0.2-0.1l1.7,0.7l0.1,0.2\n                c2,4.9,2.2,4.9,2.7,4.9h4c0.5,0,0.7,0,2.6-4.9l0.1-0.2l1.7-0.7l0.2,0.1c2.8,1.2,4.5,1.8,4.9,1.8c0.2,0,0.4-0.1,0.5-0.2l2.9-2.8\n                c0.4-0.4,0.5-0.5-1.7-5.3L45,41.8l0.7-1.7l0.2-0.1c5-2,5-2.1,5-2.6v-3.9C50.9,32.9,50.9,32.7,45.9,30.9L45.9,30.9z M31.9,41.9\n                c-3.6,0-6.5-2.9-6.5-6.4c0-3.5,2.9-6.4,6.5-6.4c3.6,0,6.5,2.9,6.5,6.4C38.4,39,35.5,41.9,31.9,41.9L31.9,41.9z M31.9,41.9\"/>\n            </svg>\n    </div>\n    <div class=\"label link-text\"><span id=")
	    ; __line = 20
	    ; __append(escapeFn( data.id ))
	    ; __append("></span></div>\n<!-- </div> -->\n")
	    ; __line = 22;
	  return __output.join("");
	} catch (e) {
	  rethrow(e, __lines, __filename, __line, escapeFn);
	}

	};

	var trusteButton = /*#__PURE__*/Object.freeze({
		'default': anonymous
	});

	var require$$0 = getCjsExportFromNamespace(trusteButton);

	var trusteConsentManager = createCommonjsModule(function (module) {
	  "use strict";
	  /* exported TrusteConsentManager */

	  /**
	   * TRUSTe Consent Manager Utility Funcations.
	   */

	  /**
	   * Determines whether the browser can support CSS3 Animations
	   * @return {Boolean}
	   */

	  function supportsAnimation() {
	    var animation = false,
	        animationstring = "animation",
	        keyframeprefix = "",
	        domPrefixes = "Webkit Moz O ms Khtml".split(" "),
	        pfx = "",
	        elm = document.createElement("div");

	    if (elm.style.animationName !== undefined) {
	      animation = true;
	    }

	    if (animation === false) {
	      for (var i = 0; i < domPrefixes.length; i++) {
	        if (elm.style[domPrefixes[i] + "AnimationName"] !== undefined) {
	          pfx = domPrefixes[i];
	          animationstring = pfx + "Animation";
	          keyframeprefix = "-" + pfx.toLowerCase() + "-";
	          animation = true;
	          break;
	        }
	      }
	    }

	    return animation;
	  }
	  /**
	   * Returns a value from local storage as a parsed object
	   * @param  {String} key key/identifier for desired object
	   * @return {Object}     Parsed JSON object from local stoage or null if not
	   * found
	   */


	  function getLocalStorageObject(key) {
	    var value;

	    if (window.localStorage) {
	      value = window.localStorage[key];
	    }

	    if (value) {
	      return JSON.parse(value);
	    } else {
	      return null;
	    }
	  }
	  /**
	   * Returns the TLD for a given string or null if string is not valid
	   * @param  {String} subdomain String representng a subdomain presumed to have
	   *                            been retrieved using window.location.hostname
	   * @return {[type]}           TLD e.g. leagueoflegends.com, lolesports.com,
	   *
	   */


	  function getTopLevelDomainFromSubdomain(subdomain) {
	    var parts = subdomain.split(".").reverse();

	    if (parts.length < 0) {
	      return null;
	    }

	    if (parts.length >= 3 && parts[1].match(/^(com|edu|gov|net|mil|org|nom|co|name|info|biz)$/i)) {
	      return parts[2] + "." + parts[1] + "." + parts[0];
	    }

	    return parts[1] + "." + parts[0];
	  }
	  /* -------------------------------------------------------------------------  */


	  var $;
	  var body = document.body || document.getElementsByTagName("body")[0];
	  var config;
	  var bannerId = "consent_blackbar";
	  var consentButton;
	  var banner;
	  var defaults = {
	    // jquery 1.9.1+ required for TRUSTe Consent Manager
	    jQueryJS: "//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js",
	    // TRUSTe DOM elements created by default
	    createDomElements: true,
	    // Use default styling
	    disableDefaultStyling: false,
	    // theme: 'corner-left', 'corner-right' or 'footer'
	    linkStyle: "corner-left",
	    // TRUSTarc DOM elements created by default
	    scriptUrl: "//consent.trustarc.com/notice",
	    // Styles to be added to page
	    styles: null,
	    // require('./styles.scss'),
	    // HTML to be added to page
	    html: require$$0,
	    //
	    urlParams: {
	      /*domain that is loading the TRUSTe script*/
	      domain: getTopLevelDomainFromSubdomain(window.location.hostname),

	      /*id of the element that will be created to contain TRUSTe*/
	      c: "teconsent",

	      /*Specifiy that blackbar functionality should be loaded.*/
	      js: "bb",

	      /*Specifiy that banner notice should be used.*/
	      noticeType: "bb",

	      /*Integrate banner Consent Manager with Google Tag Manager.
	      Enabled by default.*/
	      gtm: 1,

	      /*Need to add this to the script URL if you’d like to integrate banner
	      Consent Manager with the Consent Manager API*/
	      cdn: 1,

	      /*value in milliseconds of when banner should fade. If user does not
	      choose a consent action, the banner will reappear after a refresh of a
	      page.*/
	      // fade: null, // OMITTED BY DEFAULT

	      /*Set this value to 1 if the banner should be hidden from iPhone and
	      iPad version of CM.*/
	      ios: 0,

	      /*URL for Cookie Policy button. Special characters must be encoded.
	      The cookie policy will be in a form of a button in the banner Consent
	      Manager. Please TRUSTe Account Manager if this is required as account
	      configurationis required.*/
	      // cookieLink: '' // OMITTED BY DEFAULT

	      /*Defines which page should be loaded when Consent Manager is opened:
	      0: full consent button, 1: consent level slider*/
	      pn: 0,

	      /* Defines whether TRUSTe should use an image or text */
	      text: true,

	      /* overrides TRUSTe's automatic country detection. */
	      country: null,

	      /* overrides TRUSTe's automatic language detection. */
	      language: null,

	      /* Override this value to 'false' (not false, you need the quotes
	      otherwise this won't work) to disable responsive stylesheets.
	      Can be useful if your website is not responsive, and the default banner
	      responsive style mess with your content.
	       */
	      responsive: "true",

	      /* Use pcookie to scope the cookie to the top-level-domain
	      This ensure the cookie bar is only displayed once per domain
	      so if you see the cookie bar on nexus.euw.lol.com, the cookie
	      you get will be active for all of lol.com.
	      Any value will trigger the behavior, even 0 and false!
	      Do not override this parameter, as it's global for all the websites under a given domain.
	      */
	      pcookie: 1
	    }
	  };
	  /**
	   * Creates a TRUSTe JavaScript URL. Null variables will be excluded from the URL
	   * paremeters so that default variables can be omitted.
	   * @param  {String} scriptUrl base URL for the script
	   * @param  {Object} params    parameters to be added to the URL
	   * @return {String}           url to be used as source for script tag
	   */

	  function generateScriptUrl(scriptUrl, params) {
	    var url = "";
	    url = scriptUrl;
	    url += "?";

	    for (var param in params) {
	      if (params.hasOwnProperty(param) && params[param]) {
	        url += param + "=" + params[param] + "&";
	      }
	    }

	    return url;
	  }
	  /**
	   * Adds the button container for the dynamically generated TRUSTe UI elements.
	   * @param {String} id        ID to be applied to the DOM element. Required for
	   *                           TRUSTe to target the element.
	   * @param {String} linkStyle Look/Behaviour of button. footer, corner-right,
	   *                           corner-left.
	   * @param {String} html      HTML to add to the top-level DOM object. Provided
	   *                           by ejs template.
	   */


	  function addVendorButtonContainer(id, linkStyle, html) {
	    consentButton = document.createElement("div");
	    common.addClass(consentButton, "riotbar-cookie-policy-v2");
	    common.addClass(consentButton, "cookie-link");
	    common.addClass(consentButton, "hidden"); // Define button look/behaviour

	    switch (linkStyle) {
	      case "footer":
	        common.addClass(consentButton, "footer");
	        break;

	      case "corner-right":
	        common.addClass(consentButton, "corner-button");
	        common.addClass(consentButton, "bottom-right");
	        break;

	      case "corner-left":
	      /* falls through */

	      default:
	        common.addClass(consentButton, "corner-button");
	        common.addClass(consentButton, "bottom-left");
	        break;
	    } // Define theme


	    common.addClass(consentButton, "dark"); // Manage interactions for legacy browsers

	    if (!supportsAnimation()) {
	      common.addClass(consentButton, "static");
	    } else {
	      common.addClass(consentButton, "expanding");
	    } // Add HTML template


	    consentButton.innerHTML = html({
	      id: id
	    }) || ""; // Open Consent Manager when button is clicked.

	    consentButton.onclick = function (event) {
	      event = event || window.event; // IE8
	      // ignore clicks on the TRUSTe tag which are captured by TRUSTe lib directly

	      var target = event.target || event.srcElement;

	      if (target.nodeName.toLowerCase() === "a") {
	        return;
	      } // open Consent Manager


	      if (window.truste && window.truste.eu) {
	        window.truste.eu.clickListener();
	      }
	    };

	    body.appendChild(consentButton);
	  }
	  /**
	   * Adds the container for the consent pop-up banner.
	   * @param {String} theme Styling to be applied to UI elements. 'light',
	   *                       'dark' or custom.
	   */


	  function addVendorBannerContainer(theme) {
	    var body = document.body || document.getElementsByTagName("body")[0];
	    banner = document.createElement("div");
	    banner.id = bannerId;
	    common.addClass(banner, "riotbar-cookie-policy-v2");
	    common.addClass(banner, "cookie-banner");
	    common.addClass(banner, "hidden");

	    if (theme) {
	      common.addClass(banner, theme);
	    }

	    if (window.RiotBar && window.RiotBar.alerts && window.RiotBar.data && window.RiotBar.data.cookiePolicyV2 && window.RiotBar.data.cookiePolicyV2.enabled) {
	      // add as notification if RiotBar available
	      if (!common.getCookie("notice_gdpr_prefs")) {
	        window.RiotBar.alerts.showAlert({
	          id: "cookie-policy-v2",
	          title: "Политика файлов cookie",
	          body: "Чтобы запоминать вас и ваши интересы, персонализировать контент в соответствии с ними, настраивать рекламу и собирать статистику, обеспечивать безопасность и улучшать сервисы Riot, мы используем файлы cookie. Пользуясь этим сайтом и перемещаясь по нему, вы соглашаетесь на сбор информации на нем и за его пределами через файлы cookie. Чтобы узнать подробности, включая информацию о доступных настройках, переходите по ссылке "Узнать больше". Вы можете изменить эти настройки сейчас или позже.",
	          onClose: function onClose() {
	            var messageData = {
	              source: "preference_manager",
	              message: "submit_preferences",
	              data: "0,1,2,3"
	            };
	            truste.eu.actmessage(messageData);
	          },
	          buttons: [{
	            id: "cookie-policy-more-info",
	            text: "Узнать больше",
	            onClick: function onClick() {
	              truste.eu.prefview();
	            }
	          }]
	        });
	      }

	      banner = $("#" + bannerId).first();
	    } else {
	      // add to body
	      body.insertBefore(banner, body.firstChild);
	      banner = $(banner);
	    }
	  }
	  /**
	   * Forces the Riorbar alerts to re-render avoiding a black bar once the banners
	   * has been dismissed.
	   * TODO: Currently works by adding and removing an element. This could be
	   * replaced by a public invalidate method on the alerts API.
	   * @return {[type]} [description]
	   */


	  function invalidateBannerHeight() {
	    if (window.RiotBar && window.RiotBar.alerts) {
	      window.RiotBar.alerts.showAlert('<span style="display:hidden"></span>', "shunt");
	      window.RiotBar.alerts.hideAlert("shunt");
	    }
	  }
	  /**
	   * Monitor the banner DOM object to see if it is removed. A bit janky, but
	   * without this a black bar would be present once the banner has been dismissed.
	   * @deprecated
	   * @param  {Number} duration Amount of time to monitor the banner for.
	   */


	  function monitorBannerUpdates(duration) {
	    if (!banner) {
	      return;
	    }

	    var initialValue = banner.height();
	    var frequency = 100;
	    var count = duration / 100;
	    var interval = setInterval(function () {
	      if (banner.height() != initialValue) {
	        invalidateBannerHeight();
	        clearInterval(interval);
	      }

	      count--;

	      if (count <= 0) {
	        clearInterval(interval);
	      }
	    }, frequency);
	  }
	  /**
	   * Removes classes that keeps TRUSTe dependent UI elements hidden and forces the
	   * RiotBar containers to re-render to make space for the Cookie Banner if
	   * present.
	   */


	  function onTrusteLoaded() {
	    // show hidden elements now initialisation complete
	    $(".riotbar-cookie-policy-v2.hidden").removeClass("hidden"); // force the alert bar to render once the TRUSTe banner has loaded fully.
	    //monitorBannerUpdates(5000);

	    window.jQuery("#" + config.urlParams.c + ", #" + bannerId).off();
	  }
	  /**
	   * Handles messages from the TRUSTe API. Forces Riotbar to re-render When a
	   * 'submit_preferences' message is received that could indicate the banner has
	   * been dismissed.
	   * @param  {Object} event jQuery Event object containing the TRUSTe message.
	   */


	  function onTrusteMessage(event) {
	    try {
	      var data = JSON.parse(event.originalEvent.data);

	      if (data.source === "preference_manager") {
	        switch (data.message) {
	          case "submit_preferences":
	            //monitorBannerUpdates(2000);
	            break;
	        }
	      }
	    } catch (error) {// error parsing global message
	    }
	  }
	  /* -------------------------------------------------------------------------  */

	  /**
	   * Publicly accessible module
	   */


	  var TrusteConsentManager = module.exports = {
	    // exposed for testing
	    commonUtil: common,
	    config: {},
	    init: function init(configOverrides) {
	      this.config = config = common.deepOverride(defaults, configOverrides || {}, 1); // apply styles unless deliberately exlcuded in configuration

	      if (config.styles && !config.disableDefaultStyling) {
	        common.appendStyles(config.styles);
	      }

	      common.ensureScript("jQuery", {
	        url: config.jQueryJS
	      }).then(function () {
	        $ = window.jQuery; // subscribe to TRUSTe API messages

	        $(window).on("message", onTrusteMessage); // create DOM elements

	        if (config.createDomElements) {
	          addVendorButtonContainer(config.urlParams.c, config.linkStyle, config.html);
	          addVendorBannerContainer(config.theme);
	        } // Changes to the container objects will indicate that TRUSTe has
	        // initialised.


	        window.jQuery("#" + config.urlParams.c + ", #" + bannerId + ".riot-banner").on("DOMSubtreeModified propertychange", onTrusteLoaded); // load TRUSTe

	        common.appendScript(generateScriptUrl(config.scriptUrl, config.urlParams));
	      }); // Expose extensions/public methods

	      window.RiotCookieBar = {
	        // legacy consent check methods
	        hasCPA: this.hasFunctionalCookieConsent,
	        getGDPRConsent: this.getGDPRConsent,
	        // consent level check methods
	        hasFunctionalCookieConsent: this.hasFunctionalCookieConsent,
	        hasAdvertisingCookieConsent: this.hasAdvertisingCookieConsent,
	        hasSocialCookieConsent: this.hasSocialCookieConsent
	      };
	    },

	    /**
	     * Returns the current level of consent granted by current user. Consent can
	     * be stored in LocalStorage and/or Cookies.
	     * @return {Number} A number from 0 to 3 representing the level of consent the
	     *                  user has granted/is currently assumed.
	     */
	    getCookieConsentLevel: function getCookieConsentLevel() {
	      var level;
	      var storedObject = getLocalStorageObject("truste.eu.cookie.notice_preferences");
	      var cookieValue = common.getCookie("notice_preferences");

	      if (storedObject) {
	        level = Number(storedObject.value.split(":").join(""));
	      } else if (cookieValue) {
	        level = Number(cookieValue.split(":").join(""));
	      } else {
	        level = 3; // if not set, full consent is implied
	      }

	      return level;
	    },

	    /**
	     * Returns an object containing four keys:  essential, functional, analytics, advertising
	     * For each key, the value is true if consent has been given for this level, false otherwise.
	     * BE CAREFUL: if using the legacy cookie policy, this function will return null instead of
	     * an object. If this happens, please update to the latest version,
	     * and in the meantime use getCookieConsentLevel()
	     */
	    getGDPRConsent: function getGDPRConsent() {
	      // Example value: 0,1,3:
	      // Meaning: "accepted essential, functional and advertising"
	      var value;

	      try {
	        value = getLocalStorageObject("truste.eu.cookie.notice_gdpr_prefs").value;
	      } catch (err) {
	        value = common.getCookie("notice_gdpr_prefs");
	      }

	      if (!value || value.indexOf(":") === -1) {
	        return null;
	      } // Read the part before the colon, split on the comma
	      // and ensure we only get integers in the resulting array


	      var knownConsent = value.split(":")[0].split(",").map(function (i) {
	        return parseInt(i);
	      });
	      var levels = ["essential", "functional", "analytics", "advertising"];
	      var consent = {};
	      levels.forEach(function (c, i) {
	        consent[c] = knownConsent.indexOf(i) !== -1;
	      });
	      return consent;
	    },
	    hasGDPRConsent: function hasGDPRConsent(consent, fallbackLevel) {
	      var gdprConsent = TrusteConsentManager.getGDPRConsent(); // New method

	      if (gdprConsent) {
	        return gdprConsent[consent];
	      } // Legacy fallback.
	      // We need to keep this for players that opted out in 2017
	      // and never opted out again.


	      return TrusteConsentManager.getCookieConsentLevel() >= fallbackLevel;
	    },

	    /**
	     * Returns whether the current consent settings allow functional Cookies
	     * @return {Boolean}
	     */
	    hasFunctionalCookieConsent: function hasFunctionalCookieConsent() {
	      return TrusteConsentManager.hasGDPRConsent("functional", 1);
	    },

	    /**
	     * Returns whether the current consent settings allow social cookies
	     * @return {Boolean}
	     */
	    hasSocialCookieConsent: function hasSocialCookieConsent() {
	      return TrusteConsentManager.hasGDPRConsent("analytics", 2);
	    },

	    /**
	     * Returns whether the current consent settings allow advertising cookies
	     * @return {Boolean}
	     */
	    hasAdvertisingCookieConsent: function hasAdvertisingCookieConsent() {
	      return TrusteConsentManager.hasGDPRConsent("advertising", 3);
	    }
	  };
	});
	var trusteConsentManager_1 = trusteConsentManager.commonUtil;
	var trusteConsentManager_2 = trusteConsentManager.config;
	var trusteConsentManager_3 = trusteConsentManager.init;
	var trusteConsentManager_4 = trusteConsentManager.getCookieConsentLevel;
	var trusteConsentManager_5 = trusteConsentManager.getGDPRConsent;
	var trusteConsentManager_6 = trusteConsentManager.hasGDPRConsent;
	var trusteConsentManager_7 = trusteConsentManager.hasFunctionalCookieConsent;
	var trusteConsentManager_8 = trusteConsentManager.hasSocialCookieConsent;
	var trusteConsentManager_9 = trusteConsentManager.hasAdvertisingCookieConsent;

	var styles = "/*  styles for cookie manager plugin  */\n/* Breakpoints */\n/* Common Mixins */\n/*  styles for cookie manager plugin  */\n.riotbar-cookie-policy-v2.cookie-link {\n  /** HIDING **/\n  /** COLOURING **/\n  /** IMAGE **/\n  /** FOOTER **/\n  /** CORNER-BUTTONS **/\n}\n.riotbar-cookie-policy-v2.cookie-link * {\n  height: auto;\n  width: auto;\n  max-width: auto;\n  max-height: auto;\n  background: none;\n  margin: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  text-indent: 0;\n}\n.riotbar-cookie-policy-v2.cookie-link *:focus {\n  outline: none;\n}\n.riotbar-cookie-policy-v2.cookie-link #consent_blackbar.hidden, .riotbar-cookie-policy-v2.cookie-link.cookie-link.hidden {\n  display: none;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link.dark {\n  color: #FFFFFF;\n  /* old browsers use solid colour */\n  background: #000000;\n  color: #D2CDBC;\n  background: #1c2229;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link.dark a {\n  color: #FFFFFF;\n  /* old browsers use solid colour */\n  color: #D2CDBC;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link.dark path {\n  fill: #D2CDBC;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link.static {\n  opacity: 0.4;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=40)\";\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link {\n  cursor: pointer;\n}\n.riotbar-cookie-policy-v2.cookie-link .label {\n  /* These custom font references are actually loaded in when the `customFonts` plugin is enabled */\n  /* Main font by default */\n  font-family: \"FF Mark W05\";\n  text-transform: uppercase;\n  font-size: 10px;\n  word-spacing: 100%;\n}\n.riotbar-cookie-policy-v2.cookie-link .label:lang(ar) {\n  font-family: \"Cairo\", Tahoma, sans-serif;\n}\n.riotbar-cookie-policy-v2.cookie-link .label:lang(ru) {\n  font-family: \"Neue Frutiger World W05\", Tahoma, sans-serif;\n}\n.riotbar-cookie-policy-v2.cookie-link .label:lang(ko), .riotbar-cookie-policy-v2.cookie-link .label:lang(kr) {\n  font-family: \"RixSGo\", Tahoma, sans-serif;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link a, .riotbar-cookie-policy-v2.cookie-link.cookie-link a:hover {\n  text-decoration: none;\n}\n.riotbar-cookie-policy-v2.cookie-link .icon {\n  width: auto;\n}\n.riotbar-cookie-policy-v2.cookie-link .icon svg {\n  width: 16px;\n  height: 100%;\n  vertical-align: middle;\n}\n.riotbar-cookie-policy-v2.cookie-link.footer {\n  position: fixed;\n  z-index: 8055;\n  bottom: 0;\n  width: 100%;\n  text-align: center;\n  cursor: inherit;\n  margin-top: 2px;\n  padding-top: 5px;\n  padding-bottom: 2px;\n  border-top: 1px solid #785A28;\n}\n.riotbar-cookie-policy-v2.cookie-link.footer .label {\n  font-size: 14px;\n}\n.riotbar-cookie-policy-v2.cookie-link.footer .link-text {\n  display: inline-block;\n}\n.riotbar-cookie-policy-v2.cookie-link.footer svg {\n  width: 22px;\n}\n.riotbar-cookie-policy-v2.cookie-link.corner-button {\n  border: 1px solid #785A28;\n  padding: 4px;\n  transition: all 0.5s linear;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link.bottom-left {\n  position: fixed;\n  border-left: 0;\n  z-index: 8055;\n  bottom: 10px;\n  left: 0;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link.bottom-right {\n  position: fixed;\n  border-right: 0;\n  bottom: 10px;\n  right: 0;\n}\n.riotbar-cookie-policy-v2.cookie-link.corner-button .link-text {\n  height: 22px;\n  margin: 0;\n  display: inline-block;\n  position: relative;\n  top: 0;\n  float: left;\n}\n.riotbar-cookie-policy-v2.cookie-link.corner-button .label {\n  position: relative;\n  line-height: 2.3;\n  white-space: nowrap;\n  max-width: 300px;\n  overflow: hidden;\n}\n.riotbar-cookie-policy-v2.cookie-link.cookie-link.static .label {\n  opacity: 0.4;\n  max-width: 300px;\n}\n.riotbar-cookie-policy-v2.cookie-link.corner-button .label span {\n  padding: 0 5px;\n}\n\n#truste-consent-track {\n  border-color: #F9F9F9 !important;\n}\n\n#truste-consent-button {\n  color: #F9F9F9 !important;\n}\n\n#truste-show-consent {\n  border-color: #F9F9F9 !important;\n  color: #F9F9F9 !important;\n}\n\n.truste-text {\n  color: #F9F9F9 !important;\n}";

	var styles$1 = /*#__PURE__*/Object.freeze({
		'default': styles
	});

	var require$$2 = getCjsExportFromNamespace(styles$1);

	var deferred = createCommonjsModule(function (module) {
	  'use strict';

	  var CookiePolicyV2 = module.exports = {
	    config: {},
	    data: {},

	    /**
	     * @type {Object}
	     *   The default settings for this plugin. Any settings that could be
	     *   overriden by the users need to be here.
	     */
	    defaults: {
	      settings: {
	        urlParams: {}
	      }
	    },
	    cookieManagerModule: trusteConsentManager,
	    commonUtil: common,
	    locale: 'ru_RU',

	    /**
	     * Initialization function to be called by the bar.
	     *
	     * @param  {Object} config          Configuration for this plugin.
	     */
	    init: function init(config) {
	      // commonUtil, renderRegions, commonUtil
	      CookiePolicyV2.config = config;
	      var moduleConfig;

	      if (config && config.settings && !CookiePolicyV2.commonUtil.isEmptyObject(config.settings)) {
	        moduleConfig = config.settings;
	      } else {
	        moduleConfig = CookiePolicyV2.defaults.settings;
	      }

	      moduleConfig.styles = moduleConfig.styles || require$$2;
	      var localeParts = CookiePolicyV2.locale.split('_');
	      moduleConfig.urlParams = moduleConfig.urlParams || {};
	      moduleConfig.urlParams.language = moduleConfig.urlParams.language || localeParts[0].toLowerCase();
	      moduleConfig.urlParams.country = moduleConfig.urlParams.country || localeParts[1].toLowerCase();
	      CookiePolicyV2.cookieManagerModule.init(moduleConfig);
	    }
	  };

	  if (window.RiotBar !== undefined) {
	    window.RiotBar.plugins.cookiePolicyV2Deferred = CookiePolicyV2;
	  } else {
	    window.CookiePolicyV2 = CookiePolicyV2;
	  }
	});
	var deferred_1 = deferred.config;
	var deferred_2 = deferred.data;
	var deferred_3 = deferred.defaults;
	var deferred_4 = deferred.cookieManagerModule;
	var deferred_5 = deferred.commonUtil;
	var deferred_6 = deferred.locale;
	var deferred_7 = deferred.init;

	exports.commonUtil = deferred_5;
	exports.config = deferred_1;
	exports.cookieManagerModule = deferred_4;
	exports.data = deferred_2;
	exports.default = deferred;
	exports.defaults = deferred_3;
	exports.init = deferred_7;
	exports.locale = deferred_6;

	return exports;

}({}));
